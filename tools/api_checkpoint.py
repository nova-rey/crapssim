#!/usr/bin/env python3
"""
Append checkpoint entries to docs/API_CHANGELOG.md and, on C0, overwrite
docs/API_PHASE_STATUS.md with a provided mini-roadmap.

Usage examples:

  # Append a new checkpoint entry (non-C0)
  python tools/api_checkpoint.py \
    --phase 1 --checkpoint 2 \
    --title "Determinism Harness" \
    --bullets "Seeded RNG wrapper; action/roll tape recorder; reproducibility test."

  # Overwrite Phase Mini-Roadmap (C0) with a phase-specific plan
  python tools/api_checkpoint.py \
    --phase 2 --checkpoint 0 \
    --title "Phase 2 kickoff" \
    --roadmap-file docs/_phase2_template.md \
    --phase-title "Lifecycle Endpoint Expansion"
"""
from __future__ import annotations

import argparse
import pathlib
import subprocess
import sys
import textwrap
from datetime import datetime

ROOT = pathlib.Path(__file__).resolve().parents[1]
CHANGELOG = ROOT / "docs" / "API_CHANGELOG.md"
PHASE_STATUS = ROOT / "docs" / "API_PHASE_STATUS.md"


def git_commit_hash() -> str:
    try:
        status = subprocess.check_output(["git", "status", "--porcelain"], text=True)
        head = subprocess.check_output(["git", "rev-parse", "HEAD"], text=True).strip()
        if status.strip():
            return f"pending ({head})"
        return head
    except Exception:
        return "unknown"


def append_changelog(
    phase: int,
    checkpoint: int,
    title: str,
    bullets: list[str],
    phase_title: str | None = None,
) -> None:
    CHANGELOG.parent.mkdir(parents=True, exist_ok=True)
    when = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S UTC")
    sha = git_commit_hash()

    existing = CHANGELOG.read_text(encoding="utf-8") if CHANGELOG.exists() else ""
    lines = existing.splitlines()

    header = "# CrapsSim-Vanilla API — Checkpoint Changelog (Append-Only)"
    if header not in existing:
        preface = textwrap.dedent(
            f"""\
            {header}

            This changelog records **what changed at each checkpoint**. It is append-only and ordered newest-first within each phase.

            ---
            """
        )
        lines = preface.splitlines()

    phase_header = f"## Phase {phase} —"
    out: list[str] = []
    inserted = False
    i = 0
    while i < len(lines):
        out.append(lines[i])
        if lines[i].startswith(phase_header):
            out.append("")
            out.append(f"### P{phase}·C{checkpoint} — {title}")
            for b in bullets:
                out.append(f"- {b}")
            out.append("")
            out.append(f"_(Commit: {sha}; Date: {when})_")
            out.append("")
            inserted = True
        i += 1

    if not inserted:
        if out and out[-1].strip() != "---":
            out.append("")
        subtitle = phase_title or "(autogenerated)"
        out.append(f"## Phase {phase} — {subtitle}")
        out.append("")
        out.append(f"### P{phase}·C{checkpoint} — {title}")
        for b in bullets:
            out.append(f"- {b}")
        out.append("")
        out.append(f"_(Commit: {sha}; Date: {when})_")
        out.append("")

    CHANGELOG.write_text("\n".join(out) + "\n", encoding="utf-8")


def overwrite_phase_status(roadmap_text: str) -> None:
    PHASE_STATUS.parent.mkdir(parents=True, exist_ok=True)
    PHASE_STATUS.write_text(roadmap_text, encoding="utf-8")


def main(argv: list[str] | None = None) -> int:
    parser = argparse.ArgumentParser()
    parser.add_argument("--phase", type=int, required=True)
    parser.add_argument("--checkpoint", type=int, required=True, help="0 for C0 (kickoff)")
    parser.add_argument("--title", type=str, required=True)
    parser.add_argument("--bullets", nargs="*", default=[])
    parser.add_argument(
        "--roadmap-file",
        type=str,
        help="Markdown file whose contents overwrite API_PHASE_STATUS.md when checkpoint==0",
    )
    parser.add_argument(
        "--phase-title",
        type=str,
        help="Descriptive title appended to the phase header when a new phase section is created",
    )
    args = parser.parse_args(argv)

    append_changelog(args.phase, args.checkpoint, args.title, args.bullets, args.phase_title)

    if args.checkpoint == 0:
        if not args.roadmap_file:
            print("Warning: C0 without --roadmap-file. Phase Mini-Roadmap not overwritten.", file=sys.stderr)
        else:
            roadmap_path = pathlib.Path(args.roadmap_file)
            if not roadmap_path.exists():
                print(f"Error: roadmap file not found: {roadmap_path}", file=sys.stderr)
                return 2
            overwrite_phase_status(roadmap_path.read_text(encoding="utf-8"))
    return 0


if __name__ == "__main__":
    raise SystemExit(main())
