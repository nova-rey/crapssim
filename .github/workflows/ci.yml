name: CI
on:
  push: {}
  pull_request: {}
permissions:
  contents: read
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Ruff lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.12' }
      - name: Install ruff
        run: python -m pip install -U pip ruff
      - name: Ruff check (hard fail)
        run: ruff check .
      - name: Ruff format check (hard fail)
        run: ruff format --check .

  typecheck:
    name: Mypy (advisory)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.12' }
      - name: Install mypy + minimal deps
        run: |
          python -m pip install -U pip
          pip install mypy types-setuptools || true
      - name: Run mypy (only if packages exist)
        shell: bash
        run: |
          rc=0
          if [ -d "crapssim" ]; then mypy crapssim || rc=$?; fi
          if [ -d "crapssim_api" ]; then mypy crapssim_api || true; fi
          exit 0  # advisory for now

  test:
    name: Pytest ${{ matrix.py }}
    runs-on: ubuntu-latest
    needs: [lint, typecheck]
    strategy:
      fail-fast: false
      matrix:
        py: ['3.9','3.10','3.11','3.12']
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: ${{ matrix.py }} }

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ matrix.py }}-${{ hashFiles('**/pyproject.toml','**/requirements*.txt','**/setup.cfg') }}

      - name: Install test deps (best-effort)
        run: |
          python -m pip install -U pip wheel
          pip install pytest pytest-cov || true
          # Try to install the project if it's installable; ignore failure to keep tests running
          pip install -e . || true

      - name: Environment summary
        run: |
          python --version
          which python
          echo "PYTHONPATH before: ${PYTHONPATH:-<unset>}"
          ls -la
          echo "Packages:"
          python - <<'PY'
import sys, pkgutil
print("installed sample:", [m.name for m in pkgutil.iter_modules()][:20])
PY

      - name: Determine coverage targets
        id: cov
        shell: bash
        run: |
          COV_MODS=""
          [ -d "crapssim" ] && COV_MODS="$COV_MODS --cov=crapssim"
          [ -d "crapssim_api" ] && COV_MODS="$COV_MODS --cov=crapssim_api"
          echo "mods=$COV_MODS" >> $GITHUB_OUTPUT

      - name: Run tests (fast lane)
        shell: bash
        env:
          PYTHONPATH: ${{ github.workspace }}  # allow local imports if install failed
        run: |
          mkdir -p reports
          if ls tests/**/*.py tests/*.py 1>/dev/null 2>&1; then
            pytest -q ${{ steps.cov.outputs.mods }} \
              --cov-report=xml:coverage.xml \
              --junitxml=reports/junit-${{ matrix.py }}.xml \
              -m "not stress"
          else
            echo "No tests found; creating empty reports."
            echo '<?xml version="1.0" encoding="UTF-8"?><testsuite name="empty" tests="0"/>' > reports/junit-${{ matrix.py }}.xml
            echo '<coverage version="0"/>' > coverage.xml
          fi

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: junit-and-coverage-${{ matrix.py }}
          path: |
            reports/junit-${{ matrix.py }}.xml
            coverage.xml
