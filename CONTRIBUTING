## How to contribute to crapssim

The current top priorities for the package are to improve 
- Documentation
- Supported strategies (see [strategy](https://github.com/sphinx-doc/sphinx/issues/4961))
- Supported bets (see [bet.py](https://github.com/skent259/crapssim/blob/main/crapssim/bet.py), [#38](https://github.com/skent259/crapssim/issues/38))  

### Do you want to help the documentation?

There's many ways to improve the documentation for current and future users (including us!):

- Write a short tutorial with some example usage of the package
- Add more descriptions or type hints to internal package functions

### Do you want to help supported strategies?

Craps has so many possible strategies, and it's hard to implement them all. The ultimate goal of the package is to make building strategies easy for end users, but we also want to have commonly used and well known versions available as in the package as examples. 

If you saw a strategy online or in a book, and have implemented with "crapssim", then it most likely makes a great addition to the package. Please mention in [a new discussion](https://github.com/skent259/crapssim/discussions/new), file [an issue](https://github.com/skent259/crapssim/issues/new), or open [a pull request](https://github.com/skent259/crapssim/pulls) and we can work together to make sure it fits well.

### Do you want to help expand supported bets?

Bets to implement are currently being tracked in [#38](https://github.com/skent259/crapssim/issues/38).

This will require detailed knowledge of the package's `bet` module and also of the craps game. Please build out in a forked branch, file a [new pull request](https://github.com/skent259/crapssim/pulls) with your new bet and we can work through the details to make sure it aligns with other bets and standards.

### Did you find a bug?

* Please double check the bug has not already been reported in the [Github issues](https://github.com/skent259/crapssim/issues)
* If your issue has not already been reported, [open a new issue](https://github.com/skent259/crapssim/issues/new) with as much detail to reproduce your problem as possible. The more details you provide, the easier it will be to isolate and fix the problem!

## Contributing — Documentation and Examples

### 1. Writing Tutorials and Examples

Contributors are encouraged to write short, clear tutorials that demonstrate
basic and intermediate use of the package. Each tutorial should:

- Begin with a minimal reproducible example:

  ```python
  from crapssim.table import Table, TableUpdate
  import crapssim.bet as B

  # Create a table and a single player
  t = Table()
  p = t.add_player()

  # Place and resolve a few bets
  p.add_bet(B.PassLine(10))
  p.add_bet(B.Buy(4, 25))
  TableUpdate.roll(t, fixed_outcome=(2, 2))  # resolve a 4
  ```

- End with a short discussion of bankroll effects or table state.

Tutorials should emphasize clarity of flow and reasoning about outcomes, not
exhaustive enumeration of every bet.

### 2. Function and Type Hinting

All internal functions and classes should include:

- A one-line summary docstring describing purpose and domain.
- Explicit type hints for all parameters and return values.
- Reference to table or player context if applicable.

Example:

```python
def payout_ratio(number: int) -> float:
    """Return the true odds payout ratio for a given point number."""
```

When adding new modules, prefer `typing.Annotated` or `typing.Literal` where
constraints are known (e.g., specific point numbers, payout categories).

### 3. Descriptive Internal Documentation

When introducing new rules, toggles, or simulation assumptions:

- Explain why the choice exists, not only how it works.
- Link or cite standard rule variants (e.g., "3-4-5x odds structure",
  "commission on win vs. on bet").
- Use consistent, declarative tone — avoid subjective phrasing or casual
  language.

### 4. Testing Philosophy

Tests are expected to cover both numerical and structural correctness. Each
feature addition should include:

- A unit test verifying direct functional behavior.
- An integration or stress test demonstrating stable interaction with other
  bets.
- Deterministic seeds where possible to ensure reproducibility.

Well-documented test cases are considered part of the public tutorial layer:
future contributors should be able to learn from them.

By maintaining clarity in examples, precision in type hints, and strong linkage
between simulation design and domain reasoning, the project can continue to
serve both as a working simulator and as a reference for formal analysis of
craps dynamics.
 
